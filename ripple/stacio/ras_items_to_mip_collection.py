import os
import pystac
from typing import List

from s3_utils import init_s3_resources, list_keys
from stac_utils import (
    create_models_collection,
    create_collection,
    create_item,
    key_to_uri,
)

# STAC API URL
API_URL = os.getenv("STAC_API_URL")

def main(
    new_collection_items: List[pystac.Item],
    collection_id: str,
    description: str,
    title: str,
):
    """
    Given a list of items autogenerated using MCAT-RAS and ras-stac, this function
    creates a new collection in the STAC_API and adds the items to the collection.
    """
    collection = create_models_collection(
        new_collection_items, collection_id, description, title
    )
    r = create_collection(API_URL, collection)
    print(r)

    for item in new_collection_items:
        r = create_item(API_URL, collection_id, item)
        print(item.id, r)


if __name__ == "__main__":

    _, s3_client, _ = init_s3_resources()

    huc_id = "12040101"
    collection_id = f"huc-{huc_id}"

    bucket_name = "fim"
    bucket_prefix = "stac/12040101"

    description = f"""Prototype catalog for {collection_id}"""
    title = f"BLE HEC-RAS Models for HUC-12040101"

    # Read json files created using ras-stac and stored on s3
    json_keys = list_keys(s3_client, bucket_name, bucket_prefix, "json")

    new_collection_items = []
    prefix_filter = "mip/dev"

    for jkey in json_keys:
        item = pystac.Item.from_file(key_to_uri(jkey, bucket_name))

        # Filter items with geopackage assets
        # TODO: remove the prefix_filter filter (used here for early testing)
        # for asset_key in item.get_assets(role="application/geopackage+sqlite3"):
        #     if prefix_filter in item.assets[asset_key].href:
        #         new_collection_items.append(item)

        new_collection_items.append(item)

    main(new_collection_items, collection_id, description, title)

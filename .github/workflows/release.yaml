name: Release

on:
  push:
    branches:
      - main

permissions:
  contents: write

jobs:
  release:
    name: release
    runs-on: windows-latest
    strategy:
      matrix:
        python-version: ['3.10']
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        id: setup-python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - name: Print Python version
        run: python --version
      - name: Install release dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install build twine toml
      - name: Verify toml installation
        run: python -c "import toml; print('toml module is installed')"
      - name: Extract version from pyproject.toml
        id: get_version
        shell: pwsh
        run: |
          $version = python -c "import toml; print(toml.load('pyproject.toml')['project']['version'])"
          echo "VERSION=$version" >> $GITHUB_ENV
      - name: Build wheel and source distribution
        run: python -m build_wheel
      - name: Publish package
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.pypi.PYPI_TOKEN }}
          TWINE_REPOSITORY_URL: https://upload.pypi.org/legacy/
        run: python -m twine upload dist/*
      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ env.VERSION }}
          release_name: Release v${{ env.VERSION }}
          draft: false
          prerelease: false
      - name: Upload Release Assets
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./dist/*
          asset_name: ${{ env.VERSION }}.zip
          asset_content_type: application/zip